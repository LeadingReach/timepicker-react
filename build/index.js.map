{"version":3,"file":"index.js","sources":["../src/Components/ListItem/ListItem.js","../src/Components/List/List.js","../src/Components/Input/Input.js","../src/Components/Wrapper/Wrapper.js","../utils/rounding.js","../utils/constants.js","../utils/defaults.js","../utils/main.js","../src/Components/TimePicker/TimePicker.js"],"sourcesContent":["import * as React from 'react';\n\nconst ListItem = ({ meridiemClass, selectedClass, children, setTimeValue, value }) => {\n  const handleClick = () => {\n    setTimeValue(value);\n  };\n\n  return (\n    <li className={`${meridiemClass} ${selectedClass}`} onClick={handleClick}>\n      {children}\n    </li>\n  );\n};\n\nexport default ListItem;\n","import * as React from 'react';\nimport ListItem from '../ListItem/ListItem';\n\nconst times = {\n  hours: [\n    '01',\n    '02',\n    '03',\n    '04',\n    '05',\n    '06',\n    '07',\n    '08',\n    '09',\n    '10',\n    '11',\n    '12',\n  ],\n  minutes: [\n    '00',\n    '30',\n  ],\n  meridiem: [\n    'AM',\n    'PM',\n  ],\n};\n\nconst List = ({ setTimeValue, timeValue }) =>\n    <ul className=\"ui-timepicker-list\">\n      {times.meridiem.map(m =>\n        times.hours.map(hour =>\n          times.minutes.map((minute, idx) =>\n            <ListItem\n              key={idx}\n              meridiemClass={`ui-timepicker-${m === 'AM' ? 'am' : 'pm'}`}\n              // eslint-disable-next-line max-len\n              selectedClass={`${timeValue === `${hour}:${minute} ${m}` && 'ui-timepicker-selected'}`}\n              value={`${hour}:${minute} ${m}`}\n              setTimeValue={setTimeValue}>\n              {hour}:{minute} {m}\n            </ListItem>,\n          ),\n        ),\n      )}\n    </ul>;\n\nexport default List;\n","import * as React from 'react';\n\nconst Input = ({\n  err,\n  formatTimeValue,\n  setShowErr,\n  setErr,\n  showErr,\n  open,\n  value,\n  setTimeValue,\n  setOpen,\n}) => {\n\n  React.useEffect(() => {\n    Object.values(err).length ? setShowErr(true) : setShowErr(false);\n  }, [err]);\n\n  React.useEffect(() => {\n    !value && setErr({});\n  }, [value]);\n\n  const handleInput = ({ target: { value } }) => {\n    setTimeValue(value);\n  };\n\n  const handleBlur = ({ target: { value } }) => {\n    formatTimeValue(value);\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <div className='input-control'>\n      <input\n        className={`\n        ui-timepicker-input \n        ${Object.values(err).length\n        && 'time-input-err'}`}\n        type=\"text\"\n        value={value || ''}\n        onBlur={handleBlur}\n        onChange={handleInput}\n        onClick={handleClick}/>\n      {showErr && Object.values(err).map((err, i) =>\n        <span className={err} key={i}>\n          {err}\n        </span>)}\n    </div>\n  );\n};\n\nexport default Input;\n","import * as React from 'react';\n\nconst Wrapper = ({ children }) =>\n    <div\n      className=\"ui-timepicker-wrapper ui-timepicker-positioned-top\"\n      tabIndex=\"-1\">\n      {children}\n    </div>\n  ;\n\nexport default Wrapper;\n","import { ONE_DAY } from \"./constants\";\n\nconst roundingFunction = (seconds, settings) => {\n  if (seconds === null) {\n    return null;\n  }\n\n  let i = 0;\n  let nextVal = 0;\n  while (nextVal < seconds) {\n    i++;\n    nextVal += settings.step(i) * 60;\n  }\n\n  const prevVal = nextVal - settings.step(i - 1) * 60;\n\n  if (seconds - prevVal < nextVal - seconds) {\n    return moduloSeconds(prevVal, settings);\n  } else {\n    return moduloSeconds(nextVal, settings);\n  }\n};\n\nfunction moduloSeconds(seconds, settings) {\n  if (seconds == ONE_DAY && settings.show2400) {\n    return seconds;\n  }\n\n  return seconds % ONE_DAY;\n}\n\nexport { roundingFunction, moduloSeconds };\n","const ONE_DAY = 86400;\n\nexport { ONE_DAY };\n","import { roundingFunction } from './rounding';\n\nconst DEFAULT_SETTINGS = {\n  appendTo: 'body',\n  className: null,\n  closeOnWindowScroll: false,\n  disableTextInput: false,\n  disableTimeRanges: [],\n  disableTouchKeyboard: false,\n  durationTime: null,\n  forceRoundTime: false,\n  lang: {\n    AM: 'AM',\n    PM: 'PM',\n  },\n  listWidth: null,\n  maxTime: null,\n  minTime: null,\n  noneOption: false,\n  orientation: 'l',\n  roundingFunction,\n  scrollDefault: null,\n  selectOnBlur: false,\n  show2400: false,\n  showDuration: false,\n  showOn: ['click', 'focus'],\n  showOnFocus: true,\n  step: 30,\n  stopScrollPropagation: false,\n  timeFormat: 'g:i A',\n  typeaheadHighlight: true,\n  useSelect: false,\n  wrapHours: true,\n};\n\nconst DEFAULT_LANG = {\n  am: 'am',\n  pm: 'pm',\n  AM: 'AM',\n  PM: 'PM',\n  decimal: '.',\n  mins: 'mins',\n  hr: 'hr',\n  hrs: 'hrs',\n};\n\nexport { DEFAULT_SETTINGS, DEFAULT_LANG };\n","/* eslint-disable no-param-reassign */\nimport { DEFAULT_LANG } from './defaults';\nimport { ONE_DAY } from './constants';\n\nconst anytime2int = (input, settings) => {\n  if (typeof input === 'number') {\n    return input;\n  } else if (typeof input === 'string') {\n    return time2int(input, settings);\n  } else if (typeof input === 'object' && input instanceof Date) {\n    return (\n      input.getHours() * 3600 +\n      input.getMinutes() * 60 +\n      input.getSeconds()\n    );\n  } else if (typeof input === 'function') {\n    return input();\n  } else {\n    return null;\n  }\n};\n\nconst time2int = (timeString, settings) => {\n  if (timeString === '' || timeString == null || timeString === undefined) {\n    return null;\n  }\n\n  if (timeString === 'now') {\n    return anytime2int(new Date(), settings);\n  }\n\n  if (typeof timeString !== 'string') {\n    return timeString;\n  }\n\n  // timestring without the empty space\n  const trimmedTimeStr = timeString.toLowerCase().replace(/[\\s.]/g, '');\n  let meridiem = undefined;\n\n  // if the last character is an \"a\" or \"p\", add the \"m\"\n  if (trimmedTimeStr.slice(-1) === 'a' || trimmedTimeStr.slice(-1) === 'p') {\n    meridiem = `${trimmedTimeStr.slice(-1)}m`;\n  }\n\n  const pattern = trimmedTimeStr.match(/\\W/)\n    ? /^(([^0-9]*))?([0-9]?[0-9])(\\W+([0-5][0-9]?))?(\\W+([0-5][0-9]))?(([^0-9]*))$/\n    : /^(([^0-9]*))?([0-9]?[0-9])(([0-5][0-9]))?(([0-5][0-9]))?(([^0-9]*))$/;\n\n  const time = trimmedTimeStr.match(pattern);\n  if (!time) {\n    return null;\n  }\n\n  const hour = parseInt(Number(time[3]), 10);\n  let ampm = meridiem || time[8];\n  let hours = hour;\n  const minutes = Number(time[5]) || 0;\n  const seconds = Number(time[7]) || 0;\n\n  if (!ampm && time[3].length === 2 && time[3][0] === '0') {\n    // preceding '0' implies AM\n    ampm = 'am';\n  }\n\n  if (hour <= 12 && ampm) {\n    ampm = ampm.trim();\n    const isPm = ampm === settings.lang.pm || ampm === settings.lang.PM.toLowerCase();\n    if (hour === 12) {\n      hours = isPm ? 12 : 0;\n    } else {\n      hours = hour + (isPm ? 12 : 0);\n    }\n  } else {\n    const t = hour * 3600 + minutes * 60 + seconds;\n    if (t >= ONE_DAY + (settings.show2400 ? 1 : 0)) {\n      if (settings.wrapHours === false) {\n        return null;\n      }\n\n      hours = hour % 24;\n    }\n  }\n\n  let timeInt = hours * 3600 + minutes * 60 + seconds;\n  // if no am/pm provided, intelligently guess based on the scrollDefault\n  if (\n    hour < 12 &&\n    !ampm &&\n    settings._twelveHourTime &&\n    settings.scrollDefault()\n  ) {\n    const delta = timeInt - settings.scrollDefault();\n    if (delta < 0 && delta >= ONE_DAY / -2) {\n      timeInt = (timeInt + ONE_DAY / 2) % ONE_DAY;\n    }\n  }\n\n  return timeInt;\n};\n\nconst intStringDateOrFunc2func = input => {\n  if (input == null) {\n    return () => null;\n  } else if (typeof input === 'function') {\n    return () => anytime2int(input());\n  } else {\n    return () => anytime2int(input);\n  }\n};\n\nconst parseSettings = (settings, defaultLang) => {\n  const parsedSettings = { ...settings };\n\n  parsedSettings.lang = { ...DEFAULT_LANG, ...parsedSettings.lang };\n\n  // lang is used by other functions the rest of this depends on\n  // todo: unwind circular dependency on lang\n  // settings = settings;\n\n  if (parsedSettings.listWidth) {\n    parsedSettings.listWidth = anytime2int(parsedSettings.listWidth);\n  }\n\n  parsedSettings.minTime = intStringDateOrFunc2func(parsedSettings.minTime);\n  parsedSettings.maxTime = intStringDateOrFunc2func(parsedSettings.maxTime);\n  parsedSettings.durationTime = intStringDateOrFunc2func(parsedSettings.durationTime);\n\n  if (parsedSettings.scrollDefault) {\n    parsedSettings.scrollDefault = intStringDateOrFunc2func(parsedSettings.scrollDefault);\n  } else {\n    parsedSettings.scrollDefault = parsedSettings.minTime;\n  }\n\n  if (\n    typeof parsedSettings.timeFormat === 'string' &&\n    parsedSettings.timeFormat.match(/[gh]/)\n  ) {\n    parsedSettings._twelveHourTime = true;\n  }\n\n  if (\n    parsedSettings.showOnFocus === false &&\n    parsedSettings.showOn.indexOf('focus') !== -1\n  ) {\n    parsedSettings.showOn.splice(parsedSettings.showOn.indexOf('focus'), 1);\n  }\n\n  if (typeof parsedSettings.step !== 'function') {\n    const curryStep = parsedSettings.step;\n    parsedSettings.step = function () {\n      return curryStep;\n    };\n  }\n\n  if (!parsedSettings.disableTimeRanges) {\n    parsedSettings.disableTimeRanges = [];\n  }\n\n  if (parsedSettings.disableTimeRanges.length > 0) {\n    // convert string times to integers\n    for (const i in parsedSettings.disableTimeRanges) {\n      parsedSettings.disableTimeRanges[i] = [\n        anytime2int(parsedSettings.disableTimeRanges[i][0]),\n        anytime2int(parsedSettings.disableTimeRanges[i][1]),\n      ];\n    }\n\n    // sort by starting time\n    parsedSettings.disableTimeRanges = parsedSettings.disableTimeRanges.sort((\n      a,\n      b,\n    ) => a[0] - b[0]);\n\n    // merge any overlapping ranges\n    // eslint-disable-next-line no-plusplus\n    for (let i = parsedSettings.disableTimeRanges.length - 1; i > 0; i--) {\n      if (\n        parsedSettings.disableTimeRanges[i][0] <=\n        parsedSettings.disableTimeRanges[i - 1][1]\n      ) {\n        parsedSettings.disableTimeRanges[i - 1] = [\n          Math.min(\n            parsedSettings.disableTimeRanges[i][0],\n            parsedSettings.disableTimeRanges[i - 1][0],\n          ),\n          Math.max(\n            parsedSettings.disableTimeRanges[i][1],\n            parsedSettings.disableTimeRanges[i - 1][1],\n          ),\n        ];\n        parsedSettings.disableTimeRanges.splice(i, 1);\n      }\n    }\n  }\n\n  return parsedSettings;\n};\n\nconst _int2duration = (seconds, step, settings) => {\n  const absSeconds = Math.abs(seconds);\n\n  const time = {\n    minutes: Math.round(absSeconds / 60),\n    duration: [],\n    hours: '',\n    mins: '',\n  };\n\n  if (time.minutes < 60) {\n    // Only show (x mins) under 1 hour\n    time.duration.push(time.minutes, settings.lang.mins);\n  } else {\n    time.hours = Math.floor(time.minutes / 60);\n    time.mins = time.minutes % 60;\n\n    // Show decimal notation (eg: 1.5 hrs) for 30 minute steps\n    if (step === 30 && time.mins === 30) {\n      time.hours += settings.lang.decimal + 5;\n    }\n\n\n    time.duration.push(time.hours);\n    time.duration.push(\n      time.hours === 1 ? settings.lang.hr : settings.lang.hrs,\n    );\n\n    // Show remainder minutes notation (eg: 1 hr 15 mins) for non-30 minute steps\n    // and only if there are remainder minutes to show\n    if (time.step !== 30 && time.mins) {\n      time.duration.push(time.mins);\n      time.duration.push(settings.lang.mins);\n    }\n  }\n\n  return time.duration.join(' ');\n};\n\nconst _roundAndFormatTime = (seconds, settings) => {\n  // console.log('_roundAndFormatTime')\n  const s = settings.roundingFunction(seconds, settings);\n  if (s != null) {\n    return _int2time(s, settings);\n  }\n};\n\nconst _int2time = (timeInt, settings) => {\n  if (typeof timeInt !== 'number') {\n    return null;\n  }\n\n  const seconds = parseInt(timeInt % 60, 10);\n  const minutes = parseInt((timeInt / 60) % 60, 10);\n  const hours = parseInt((timeInt / (60 * 60)) % 24, 10);\n\n  const time = new Date(1970, 0, 2, hours, minutes, seconds, 0);\n\n  if (isNaN(time.getTime())) {\n    return null;\n  }\n\n  if (typeof settings.timeFormat === 'function') {\n    return settings.timeFormat(time);\n  }\n  // console.log({ time });\n\n  const formatTime = {\n    a: () => time.getHours() > 11\n      ? settings.lang.pm\n      : settings.lang.am,\n    A: () => time.getHours() > 11\n      ? settings.lang.PM\n      : settings.lang.AM,\n    g: () => {\n      const modHour = time.getHours() % 12;\n      return modHour === 0 ? '12' : modHour;\n    },\n    G: () => {\n      let modHour = time.getHours();\n      if (timeInt === ONE_DAY) {\n        modHour = settings.show2400 ? 24 : 0;\n      }\n      return modHour;\n    },\n    h: () => {\n      let modHour = time.getHours() % 12;\n      if (modHour !== 0 && modHour < 10) {\n        modHour = `0${modHour}`;\n      }\n      return modHour === 0 ? '12' : modHour;\n    },\n    H: () => {\n      let hour = time.getHours();\n      if (timeInt === ONE_DAY) {\n        hour = settings.show2400 ? 24 : 0;\n      }\n      return hour > 9 ? hour : `0${hour}`;\n    },\n    i: () => {\n      const m = time.getMinutes();\n      return m > 9 ? m : `0${m}`;\n    },\n    s: () => {\n      const seconds = time.getSeconds();\n      return seconds > 9 ? seconds : `0${seconds}`;\n    },\n    '\\\\': () => '',\n  };\n\n  const formattedOutput = settings.timeFormat.split('').reduce((output, code) =>\n    formatTime[code]\n      ? output + formatTime[code]()\n      : output + code\n  , '');\n\n  console.log({ formattedOutput });\n\n  return formattedOutput;\n};\n\n// origin refers to whether or not the input is a select or if it is text input\nconst _formatValue = (timeValue, settings, errors, origin, setTimeValue) => {\n  // do this in timepicker component\n  // handleFormatValue\n  // setTimeValue\n  // if (timeValue === '') {\n  //   setTimeValue(null, origin);\n  //   return;\n  // }\n\n  // IE fires change event before blur\n  // TODO figure this out\n  // if (_isFocused(targetEl) && (!e || e.type !== 'change')) {\n  //   return;\n  // }\n\n  const formatted = { errors, timeValue, origin };\n  let seconds = anytime2int(timeValue, settings);\n  console.log({ timeValue, seconds });\n\n  // input validation?\n  if (seconds == null) {\n\n    errors.timeFormatError = 'Please enter a valid time.';\n    return formatted;\n  }\n\n  let rangeError = false;\n  // check that the time in within bounds\n  if (\n    settings.minTime != null &&\n    settings.maxTime != null &&\n    (seconds < settings.minTime() || seconds > settings.maxTime())\n  ) {\n    rangeError = true;\n  }\n\n  // check that time isn't within disabled time ranges\n  for (const range of settings.disableTimeRanges) {\n    if (seconds >= range[0] && seconds < range[1]) {\n      rangeError = true;\n      break;\n    }\n  }\n\n  if (settings.forceRoundTime) {\n    const roundSeconds = settings.roundingFunction(seconds, settings);\n    if (roundSeconds !== seconds) {\n      seconds = roundSeconds;\n      origin = null;\n    }\n  }\n\n  formatted.timeValue = _int2time(seconds, settings);\n\n  if (rangeError) {\n    errors.timeRangeError = 'Please select a time within the time range.';\n  }\n\n  return formatted;\n};\n\nexport {\n  anytime2int,\n  _int2duration,\n  _formatValue,\n  parseSettings,\n  _roundAndFormatTime,\n};\n","import * as React from 'react';\nimport List from 'Components/List/List';\nimport Input from 'Components/Input/Input';\nimport Wrapper from 'Components/Wrapper/Wrapper';\nimport { DEFAULT_SETTINGS } from 'utils/defaults';\nimport { _formatValue } from 'utils/main';\nimport './timepicker.css';\n\n// const initialState = { ...DEFAULT_SETTINGS };\n// const reducer = (state, action) => {\n// };\n// const [settings, dispatch] = React.useReducer(reducer, initialState);\n\nconst TimePicker = ({ onChange, value = null }) => {\n  const [timeValue, setTimeValue] = React.useState(value);\n  const [open, setOpen] = React.useState(false);\n  const [showErr, setShowErr] = React.useState(false);\n  const [err, setErr] = React.useState({});\n\n  React.useEffect(() => {\n    onChange && onChange(timeValue);\n  }, [timeValue]);\n\n  const handleMaskClick = () => {\n    setOpen(false);\n    formatTimeValue(timeValue);\n  };\n\n  const formatTimeValue = value => {\n    const { timeValue, errors } = _formatValue(value, DEFAULT_SETTINGS, {});\n    !value && setErr(errors);\n    // eslint-disable-next-line no-negated-condition\n    !timeValue ? setTimeValue(null) : setTimeValue(timeValue);\n  };\n\n  return (\n    <div>\n      <Input\n        open={open}\n        value={timeValue}\n        setTimeValue={setTimeValue}\n        setOpen={setOpen}\n        showErr={showErr}\n        setShowErr={setShowErr}\n        setErr={setErr}\n        err={err}\n        formatTimeValue={formatTimeValue}\n        />\n      <div className={`ui-list-mask ${open && 'visible'}`} onClick={handleMaskClick}></div>\n      {open && <Wrapper>\n        <List setTimeValue={setTimeValue} timeValue={timeValue}/>\n      </Wrapper>}\n    </div>\n  );\n};\n\nexport default TimePicker;\n"],"names":["ListItem","meridiemClass","selectedClass","children","setTimeValue","value","React","className","onClick","times","hours","minutes","meridiem","List","timeValue","map","m","hour","minute","idx","key","Input","err","formatTimeValue","setShowErr","setErr","showErr","open","setOpen","useEffect","Object","values","length","type","onBlur","target","onChange","i","Wrapper","tabIndex","moduloSeconds","seconds","settings","show2400","DEFAULT_SETTINGS","appendTo","closeOnWindowScroll","disableTextInput","disableTimeRanges","disableTouchKeyboard","durationTime","forceRoundTime","lang","AM","PM","listWidth","maxTime","minTime","noneOption","orientation","roundingFunction","nextVal","step","prevVal","scrollDefault","selectOnBlur","showDuration","showOn","showOnFocus","stopScrollPropagation","timeFormat","typeaheadHighlight","useSelect","wrapHours","anytime2int","input","time2int","_typeof","Date","getHours","getMinutes","getSeconds","timeString","undefined","trimmedTimeStr","toLowerCase","replace","slice","pattern","match","time","parseInt","Number","ampm","isPm","trim","pm","timeInt","_twelveHourTime","delta","ONE_DAY","_formatValue","errors","origin","formatted","console","log","timeFormatError","rangeError","range","roundSeconds","isNaN","getTime","formatTime","a","am","A","g","modHour","G","h","H","s","formattedOutput","split","reduce","output","code","_int2time","timeRangeError","useState"],"mappings":"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"}